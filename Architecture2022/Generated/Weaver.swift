import Foundation
import KeychainAccess
import SwiftUI
import TIFoundationUtils
import TISwiftUtils
import UIKit

// swiftlint:disable all
/// This file is generated by Weaver 1.0.7
/// DO NOT EDIT!

final class MainDependencyContainer {

    static var onFatalError: (String, StaticString, UInt) -> Never = { message, file, line in
        Swift.fatalError(message, file: file, line: line)
    }

    fileprivate static func fatalError(file: StaticString = #file, line: UInt = #line) -> Never {
        onFatalError("Invalid memory graph. This is never suppose to happen. Please file a ticket at https://github.com/scribd/Weaver", file, line)
    }

    private typealias ParametersCopier = (MainDependencyContainer) -> Void
    private typealias Builder<T> = (ParametersCopier?) -> T

    private func builder<T>(_ value: T) -> Builder<T> {
        return { [weak self] copyParameters in
            guard let self = self else {
                MainDependencyContainer.fatalError()
            }
            copyParameters?(self)
            return value
        }
    }

    private func weakOptionalBuilder<T>(_ value: Optional<T>) -> Builder<Optional<T>> where T: AnyObject {
        return { [weak value] _ in value }
    }

    private func weakBuilder<T>(_ value: T) -> Builder<T> where T: AnyObject {
        return { [weak self, weak value] copyParameters in
            guard let self = self, let value = value else {
                MainDependencyContainer.fatalError()
            }
            copyParameters?(self)
            return value
        }
    }

    private func lazyBuilder<T>(_ builder: @escaping Builder<T>) -> Builder<T> {
        var _value: T?
        return { copyParameters in
            if let value = _value {
                return value
            }
            let value = builder(copyParameters)
            _value = value
            return value
        }
    }

    private func weakLazyBuilder<T>(_ builder: @escaping Builder<T>) -> Builder<T> where T: AnyObject {
        weak var _value: T?
        return { copyParameters in
            if let value = _value {
                return value
            }
            let value = builder(copyParameters)
            _value = value
            return value
        }
    }

    private static func fatalBuilder<T>() -> Builder<T> {
        return { _ in
            MainDependencyContainer.fatalError()
        }
    }

    private var builders = Dictionary<String, Any>()
    private func getBuilder<T>(for name: String, type _: T.Type) -> Builder<T> {
        guard let builder = builders[name] as? Builder<T> else {
            return MainDependencyContainer.fatalBuilder()
        }
        return builder
    }

    private static var _dynamicResolvers = [Any]()
    private static var _dynamicResolversLock = NSRecursiveLock()

    fileprivate static func _popDynamicResolver<Resolver>(_ resolverType: Resolver.Type) -> Resolver {
        guard let dynamicResolver = _dynamicResolvers.removeFirst() as? Resolver else {
            MainDependencyContainer.fatalError()
        }
        return dynamicResolver
    }

    static func _pushDynamicResolver<Resolver>(_ resolver: Resolver) {
        _dynamicResolvers.append(resolver)
    }

    enum Scope {
        case transient
        case container
        case weak
        case lazy
    }

    enum Platform {
        case OSX
        case macOS
        case iOS
        case watchOS
        case tvOS
    }

    enum DependencyKind {
        case registration
        case reference
        case parameter
    }

    var alertHostViewController: UIViewController {
        return getBuilder(for: "alertHostViewController", type: UIViewController.self)(nil)
    }

    var applicationFlow: ApplicationFlow {
        return getBuilder(for: "applicationFlow", type: ApplicationFlow.self)(nil)
    }

    var authFlow: AuthFlow {
        return getBuilder(for: "authFlow", type: AuthFlow.self)(nil)
    }

    var authService: AuthService {
        return getBuilder(for: "authService", type: AuthService.self)(nil)
    }

    var errorHandlingService: GlobalErrorHandlingService {
        return getBuilder(for: "errorHandlingService", type: GlobalErrorHandlingService.self)(nil)
    }

    var globalErrorHandlingService: GlobalErrorHandlingService {
        return getBuilder(for: "globalErrorHandlingService", type: GlobalErrorHandlingService.self)(nil)
    }

    var networkService: NetworkService {
        return getBuilder(for: "networkService", type: NetworkService.self)(nil)
    }

    var refreshTokenService: RefreshTokenService {
        return getBuilder(for: "refreshTokenService", type: RefreshTokenService.self)(nil)
    }

    fileprivate init() {
    }

    private func appDependenciesDependencyResolver() -> AppDependenciesDependencyResolver {
        let _self = MainDependencyContainer()
        _self.builders["networkService"] = lazyBuilder { (_: Optional<ParametersCopier>) -> NetworkService in return NetworkService() }
        _self.builders["authService"] = lazyBuilder { [weak _self] (_: Optional<ParametersCopier>) -> AuthService in
            defer { MainDependencyContainer._dynamicResolversLock.unlock() }
            MainDependencyContainer._dynamicResolversLock.lock()
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            let __self = _self.authServiceDependencyResolver()
            return AuthService(injecting: __self)
        }
        _self.builders["refreshTokenService"] = lazyBuilder { [weak _self] (_: Optional<ParametersCopier>) -> RefreshTokenService in
            defer { MainDependencyContainer._dynamicResolversLock.unlock() }
            MainDependencyContainer._dynamicResolversLock.lock()
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            let __self = _self.refreshTokenServiceDependencyResolver()
            return RefreshTokenService(injecting: __self)
        }
        _self.builders["alertHostViewController"] = lazyBuilder { [weak _self] (_: Optional<ParametersCopier>) -> UIViewController in
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            return AppDependencies.makeAlertHostViewController(_self as UIViewControllerInputDependencyResolver)
        }
        _self.builders["globalErrorHandlingService"] = lazyBuilder { [weak _self] (_: Optional<ParametersCopier>) -> GlobalErrorHandlingService in
            defer { MainDependencyContainer._dynamicResolversLock.unlock() }
            MainDependencyContainer._dynamicResolversLock.lock()
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            let __self = _self.globalErrorHandlingServiceDependencyResolver()
            return GlobalErrorHandlingService(injecting: __self)
        }
        _self.builders["authFlow"] = lazyBuilder { [weak _self] (_: Optional<ParametersCopier>) -> AuthFlow in
            defer { MainDependencyContainer._dynamicResolversLock.unlock() }
            MainDependencyContainer._dynamicResolversLock.lock()
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            let __self = _self.authFlowDependencyResolver()
            return AuthFlow(injecting: __self)
        }
        _self.builders["applicationFlow"] = lazyBuilder { [weak _self] (_: Optional<ParametersCopier>) -> ApplicationFlow in
            defer { MainDependencyContainer._dynamicResolversLock.unlock() }
            MainDependencyContainer._dynamicResolversLock.lock()
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            let __self = _self.applicationFlowDependencyResolver()
            return ApplicationFlow(injecting: __self)
        }
        _self.builders["errorHandlingService"] = _self.builder(_self.globalErrorHandlingService)
        _self.builders["globalErrorHandlingService"] = _self.builder(_self.globalErrorHandlingService)
        _ = _self.getBuilder(for: "networkService", type: NetworkService.self)(nil)
        _ = _self.getBuilder(for: "authService", type: AuthService.self)(nil)
        _ = _self.getBuilder(for: "refreshTokenService", type: RefreshTokenService.self)(nil)
        _ = _self.getBuilder(for: "alertHostViewController", type: UIViewController.self)(nil)
        _ = _self.getBuilder(for: "globalErrorHandlingService", type: GlobalErrorHandlingService.self)(nil)
        _ = _self.getBuilder(for: "authFlow", type: AuthFlow.self)(nil)
        _ = _self.getBuilder(for: "applicationFlow", type: ApplicationFlow.self)(nil)
        MainDependencyContainer._pushDynamicResolver({ _self.networkService })
        MainDependencyContainer._pushDynamicResolver({ _self.authService })
        MainDependencyContainer._pushDynamicResolver({ _self.refreshTokenService })
        MainDependencyContainer._pushDynamicResolver({ _self.alertHostViewController })
        MainDependencyContainer._pushDynamicResolver({ _self.globalErrorHandlingService })
        MainDependencyContainer._pushDynamicResolver({ _self.authFlow })
        MainDependencyContainer._pushDynamicResolver({ _self.applicationFlow })
        return _self
    }

    static func appDependenciesDependencyResolver() -> AppDependenciesDependencyResolver {
        let _self = MainDependencyContainer().appDependenciesDependencyResolver()
        return _self
    }

    private func applicationFlowDependencyResolver() -> ApplicationFlowDependencyResolver {
        let _self = MainDependencyContainer()
        _self.builders["authFlow"] = _self.builder(authFlow)
        MainDependencyContainer._pushDynamicResolver({ _self.authFlow })
        return _self
    }

    private func authFlowDependencyResolver() -> AuthFlowDependencyResolver {
        let _self = MainDependencyContainer()
        _self.builders["authService"] = _self.builder(authService)
        _self.builders["errorHandlingService"] = _self.builder(globalErrorHandlingService)
        _self.builders["globalErrorHandlingService"] = _self.builder(globalErrorHandlingService)
        MainDependencyContainer._pushDynamicResolver({ _self.authService })
        MainDependencyContainer._pushDynamicResolver({ _self.errorHandlingService })
        return _self
    }

    fileprivate func previewDependenciesDependencyResolver() -> PreviewDependenciesDependencyResolver {
        let _self = MainDependencyContainer()
        _self.builders["networkService"] = lazyBuilder { (_: Optional<ParametersCopier>) -> NetworkService in return NetworkService() }
        _self.builders["authService"] = lazyBuilder { [weak _self] (_: Optional<ParametersCopier>) -> AuthService in
            defer { MainDependencyContainer._dynamicResolversLock.unlock() }
            MainDependencyContainer._dynamicResolversLock.lock()
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            let __self = _self.authServiceDependencyResolver()
            return AuthService(injecting: __self)
        }
        _ = _self.getBuilder(for: "networkService", type: NetworkService.self)(nil)
        _ = _self.getBuilder(for: "authService", type: AuthService.self)(nil)
        MainDependencyContainer._pushDynamicResolver({ _self.networkService })
        MainDependencyContainer._pushDynamicResolver({ _self.authService })
        return _self
    }

    static func previewDependenciesDependencyResolver() -> PreviewDependenciesDependencyResolver {
        let _self = MainDependencyContainer().previewDependenciesDependencyResolver()
        return _self
    }

    private func authServiceDependencyResolver() -> AuthServiceDependencyResolver {
        let _self = MainDependencyContainer()
        _self.builders["networkService"] = _self.builder(networkService)
        MainDependencyContainer._pushDynamicResolver({ _self.networkService })
        return _self
    }

    private func globalErrorHandlingServiceDependencyResolver() -> GlobalErrorHandlingServiceDependencyResolver {
        let _self = MainDependencyContainer()
        _self.builders["alertHostViewController"] = _self.builder(alertHostViewController)
        _self.builders["refreshTokenService"] = _self.builder(refreshTokenService)
        MainDependencyContainer._pushDynamicResolver({ _self.refreshTokenService })
        MainDependencyContainer._pushDynamicResolver({ _self.alertHostViewController })
        return _self
    }

    private func refreshTokenServiceDependencyResolver() -> RefreshTokenServiceDependencyResolver {
        let _self = MainDependencyContainer()
        _self.builders["authService"] = _self.builder(authService)
        MainDependencyContainer._pushDynamicResolver({ _self.authService })
        return _self
    }
}


protocol AlertHostViewControllerResolver: AnyObject {
    var alertHostViewController: UIViewController { get }
}

protocol ApplicationFlowResolver: AnyObject {
    var applicationFlow: ApplicationFlow { get }
}

protocol AuthFlowResolver: AnyObject {
    var authFlow: AuthFlow { get }
}

protocol AuthServiceResolver: AnyObject {
    var authService: AuthService { get }
}

protocol ErrorHandlingServiceResolver: AnyObject {
    var errorHandlingService: GlobalErrorHandlingService { get }
}

protocol GlobalErrorHandlingServiceResolver: AnyObject {
    var globalErrorHandlingService: GlobalErrorHandlingService { get }
}

protocol NetworkServiceResolver: AnyObject {
    var networkService: NetworkService { get }
}

protocol RefreshTokenServiceResolver: AnyObject {
    var refreshTokenService: RefreshTokenService { get }
}

extension MainDependencyContainer: AlertHostViewControllerResolver, ApplicationFlowResolver, AuthFlowResolver, AuthServiceResolver, ErrorHandlingServiceResolver, GlobalErrorHandlingServiceResolver, NetworkServiceResolver, RefreshTokenServiceResolver {
}

extension MainDependencyContainer {
}

typealias AppDependenciesDependencyResolver = NetworkServiceResolver & AuthServiceResolver & RefreshTokenServiceResolver & AlertHostViewControllerResolver & GlobalErrorHandlingServiceResolver & AuthFlowResolver & ApplicationFlowResolver

typealias ApplicationFlowDependencyResolver = AuthFlowResolver

typealias AuthFlowDependencyResolver = AuthServiceResolver & ErrorHandlingServiceResolver

typealias PreviewDependenciesDependencyResolver = NetworkServiceResolver & AuthServiceResolver

typealias AuthServiceDependencyResolver = NetworkServiceResolver

typealias GlobalErrorHandlingServiceDependencyResolver = RefreshTokenServiceResolver & AlertHostViewControllerResolver

typealias RefreshTokenServiceDependencyResolver = AuthServiceResolver

typealias UIViewControllerInputDependencyResolver = AlertHostViewControllerResolver & ApplicationFlowResolver & AuthFlowResolver & AuthServiceResolver & GlobalErrorHandlingServiceResolver & NetworkServiceResolver & RefreshTokenServiceResolver

@propertyWrapper
struct Weaver<ConcreteType, AbstractType> {

    typealias Resolver = () -> AbstractType
    let resolver = MainDependencyContainer._popDynamicResolver(Resolver.self)

    init(_ kind: MainDependencyContainer.DependencyKind,
         type: ConcreteType.Type,
         scope: MainDependencyContainer.Scope = .container,
         setter: Bool = false,
         escaping: Bool = false,
         builder: Optional<Any> = nil,
         objc: Bool = false,
         platforms: Array<MainDependencyContainer.Platform> = []) {
        // no-op
    }

    var wrappedValue: AbstractType {
        return resolver()
    }
}

extension Weaver where ConcreteType == Void {
    init(_ kind: MainDependencyContainer.DependencyKind,
         scope: MainDependencyContainer.Scope = .container,
         setter: Bool = false,
         escaping: Bool = false,
         builder: Optional<Any> = nil,
         objc: Bool = false,
         platforms: Array<MainDependencyContainer.Platform> = []) {
        // no-op
    }
}
