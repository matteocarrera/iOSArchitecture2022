//
// Token.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Авторизационный токен */

public struct Token: Codable {

    /** Тип токена */
    public var name: String
    /** Значение токена */
    public var value: String
    /** Дата окончания действия токена */
    public var isoDateExpiration: Date?
    /** Дата окончания действия токена */
    public var isoDateTimeExpiration: Date?
    /** Дата окончания действия токена */
    public var expiration: Date

    private enum CodingKeys: String, CodingKey {
        case name
        case value
        case isoDateExpiration
        case isoDateTimeExpiration
        case expiration
    }

    public init(name: String, value: String, isoDateExpiration: Date? = nil, isoDateTimeExpiration: Date? = nil, expiration: Date) {
        self.name = name
        self.value = value
        self.isoDateExpiration = isoDateExpiration
        self.isoDateTimeExpiration = isoDateTimeExpiration
        self.expiration = expiration
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        name = try container.decode(String.self, forKey: .name)
        value = try container.decode(String.self, forKey: .value)
        isoDateExpiration = try container.decodeDate(forKey: .isoDateExpiration, using: try decoder.userInfo.iso8601DateFormatter(for: .withFullDate), required: false)
        isoDateTimeExpiration = try container.decodeDate(forKey: .isoDateTimeExpiration, using: try decoder.userInfo.iso8601DateFormatter(for: .withInternetDateTime), required: false)
        expiration = try container.decodeDate(forKey: .expiration, using: try decoder.userInfo.dateFormatter(for: APIDateFormat.yyyyMMddTHHmmss_SZ))
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(name, forKey: .name)
        try container.encode(value, forKey: .value)
        try container.encode(date: isoDateExpiration, forKey: .isoDateExpiration, using: try encoder.userInfo.iso8601DateFormatter(for: .withFullDate), required: false)
        try container.encode(date: isoDateTimeExpiration, forKey: .isoDateTimeExpiration, using: try encoder.userInfo.iso8601DateFormatter(for: .withInternetDateTime), required: false)
        try container.encode(date: expiration, forKey: .expiration, using: try encoder.userInfo.dateFormatter(for: APIDateFormat.yyyyMMddTHHmmss_SZ))
    }


}
